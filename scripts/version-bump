#!/usr/bin/env python3
import os
import json
from typing import Dict, Tuple
from textwrap import dedent
from sys import version_info
from argparse import ArgumentParser

import docker
import requests
from packaging import version

RELEASE_URL = "https://api.github.com/repos/{repo}/releases/latest"
RELEASE_TAG = "https://github.com/{repo}/releases/tag/{tag}"

repos = {
    "CoreDNS": "coredns/coredns",
    "ZeroTier": "zerotier/ZeroTierOne",
}


def get_upstream_version(repo: str) -> Tuple:
    url = RELEASE_URL.format(repo=repo)
    tag = json.loads(requests.get(url).content)["tag_name"]
    return version.parse(tag), tag


def get_current_versions(dep: str):
    """Retrieves the current CoreDNS version within the ZeroDNS container.
    """
    image = os.environ["GITHUB_REPOSITORY"]
    client = docker.from_env()
    client.images.pull(f"{image}", tag="latest")
    labels = client.images.get(f"{image}:latest").attrs["Config"]["Labels"]

    return version.parse(labels.get(dep, "") or "0")


def update(dep: str) -> Dict[str, object]:
    outputs = {
        "diff": {},
        "body": {},
        "majorUpgrade": {}
    }

    if dep in repos:
        key = f"v{dep}"
        upstream, tagname = get_upstream_version(repos[dep])
    else:
        key = "vZeroDNS"
        upstream, tagname = version.parse(dep), None

    current = get_current_versions(key)

    outputs[key] = max(current, upstream)
    outputs["diff"][key] = current != outputs[key] and sum(current.release) > 0

    if tagname and outputs["diff"][key]:
        url = RELEASE_TAG.format(repo=repos[dep], tag=tagname)
        outputs["body"][key] = dedent(f"""
        ## Changes to {key}
        - Upgrading from `{current}` -> `{upstream}`.
        - Inspect the changes [here]({url}).
        """)
        outputs[f"majorUpgrade"][key] = bool(upstream.major - current.major)

    return outputs


if __name__ == "__main__":
    assert version_info >= (3, 6)

    parser = ArgumentParser()
    parser.add_argument("vZeroDNS", nargs="?", type=str)
    args = parser.parse_args()

    actions = dict()
    outputs = update(args.vZeroDNS or "ZeroDNS")
    actions["vZeroDNS"] = outputs["vZeroDNS"]

    for dep in repos.keys():
        out = update(dep)
        key = next(filter(lambda k: dep in k, out.keys()))
        actions[key] = out[key]

        for key, val in out.items():
            if key in outputs:
                outputs[key].update(val)

    diff = any(outputs["diff"].values())
    actions["draftRelease"] = str(any(outputs["majorUpgrade"].values())).lower()
    actions["createRelease"] = str(diff and not outputs["diff"]["vZeroDNS"]).lower()
    actions["body"] = "".join(list(outputs["body"].values()))

    if actions["createRelease"] and not actions["draftRelease"]:
        z = actions["vZeroDNS"]
        actions["vZeroDNS"] = version.parse(f"{z.major}.{z.minor}.{z.micro + 1}")
        actions["title"] = f"v{actions['vZeroDNS']}"

    if not actions["createRelease"]:
        del actions["draftRelease"]
        del actions["body"]

    for key, value in actions.items():
        print(f"::set-output name={key}::{value}")
