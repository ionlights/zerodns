#!/usr/bin/env python3
import os
import json
from typing import Dict, Tuple
from textwrap import dedent
from sys import version_info
from argparse import ArgumentParser

import docker
import requests
from packaging.version import parse


def get_upstream_CoreDNS_version(arm: bool):
    """Retrieves the latest CoreDNS release from the CoreDNS GitHub repository. Additionally provides the Package and Release URLs to use in ZeroDNS Docker container and Release Notes.
    """
    url = "https://api.github.com/repos/coredns/coredns/releases/latest"
    release = json.loads(requests.get(url).content)

    CoreDNS = parse(release["tag_name"])

    lookup = "linux_amd64" if not arm else "linux_arm64"
    pkg_url = next(filter(lambda x: lookup in x["name"], release["assets"]))
    pkg_url = pkg_url["browser_download_url"]
    release_info = release["url"]

    return CoreDNS, pkg_url, release_info


def get_current_CoreDNS_version():
    """Retrieves the current CoreDNS version within the ZeroDNS container.
    """
    image = os.environ["GITHUB_REPOSITORY"]
    client = docker.from_env()
    client.images.pull(f"{image}", tag="latest")
    container = client.images.get(f"{image}:latest")
    labels = container.attrs["Config"]["Labels"]

    CoreDNS = parse(labels["vCoreDNS"])
    ZeroDNS = parse(labels["vZeroDNS"])

    return CoreDNS, ZeroDNS


def ZeroDNS_update(vZeroDNS: str) -> Tuple[Dict, bool]:
    """Allows for ZeroDNS version to be manually updated and allows for version-bumping based on CoreDNS changes.

    Params:
    .. vZeroDNS: manually supplied ZeroDNS version
    """
    _, c_ZeroDNS = get_current_CoreDNS_version()
    u_ZeroDNS = parse(vZeroDNS)

    ZeroDNS = max(c_ZeroDNS, u_ZeroDNS)

    outputs = dict()
    outputs["vZeroDNS"] = ZeroDNS

    return outputs, c_ZeroDNS != ZeroDNS


def CoreDNS_update(arm: bool = False) -> Tuple[Dict, bool]:
    """Gathers CoreDNS version info, determines latest version, how it upgraded, and release contents.
    """
    u_CoreDNS, pkg_url, release_info = get_upstream_CoreDNS_version(arm)
    c_CoreDNS, _ = get_current_CoreDNS_version()

    CoreDNS = max(c_CoreDNS, u_CoreDNS)

    outputs = dict()
    outputs["vCoreDNS"] = CoreDNS
    outputs["CoreDNSpkg"] = pkg_url
    outputs["body"] = dedent(f"""
    ## Changes to CoreDNS
    - CoreDNS Version: `{c_CoreDNS}` -> `{u_CoreDNS}`.
    - Inspect the changes [here]({release_info}).
    """)
    outputs["majorUpgradeCoreDNS"] = bool(u_CoreDNS.major - c_CoreDNS.major)

    return outputs, c_CoreDNS != CoreDNS


if __name__ == "__main__":
    assert version_info >= (3, 6)

    parser = ArgumentParser()
    parser.add_argument("vZeroDNS", nargs="?", type=str)
    parser.add_argument("--arm", action="store_true")
    args = parser.parse_args()

    outputs = dict()
    out_ZeroDNS, diff_ZeroDNS = ZeroDNS_update(args.vZeroDNS or "")
    out_CoreDNS, diff_CoreDNS = CoreDNS_update(args.arm)

    outputs.update(out_ZeroDNS)
    outputs.update(out_CoreDNS)

    outputs["differs"] = str(diff_ZeroDNS or diff_CoreDNS).lower()

    patch_bump = not outputs["majorUpgradeCoreDNS"] and diff_CoreDNS
    create_release = patch_bump or diff_ZeroDNS

    if patch_bump:
        zdns = outputs["vZeroDNS"]
        outputs["vZeroDNS"] = parse(f"{zdns.major}.{zdns.minor}.{zdns.micro + 1}")
    else:
        del outputs["body"]

    outputs["createRelease"] = str(create_release).lower()

    del outputs["majorUpgradeCoreDNS"]

    for key, value in outputs.items():
        print(f"::set-output name={key}::{value}")
